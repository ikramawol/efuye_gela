// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  email String @unique
  name String?
  password String?
  posts Post[]
  comments Comment[]
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[]
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[] @relation("PostTags")
}

model Post {
  id Int @id @default(autoincrement())
  title String
  content String
  published Boolean @default(false)
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId Int
  comments Comment[]
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?
  tags       Tag[]     @relation("PostTags")
  @@index([authorId])
  @@index([title])
}

model Comment {
  id Int @id @default(autoincrement())
  content String
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId Int
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([authorId])
  @@index([postId])
  @@index([createdAt])
}